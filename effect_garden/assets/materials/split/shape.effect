// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        s_vertex: {value: [0., 0., 0., 0.]}
        alphaThreshold: { value: 0.5 }
        s_windowSize: {value: [1.,1.]}
        s_offset: {value: [0.,0.]}
        s_time: {value: 0.}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color; // node 里设置的色彩
  out vec4 v_color;
  out vec2 f_pos;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    f_pos = pos.xy;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 f_pos;

 // 只要node里设置了sprite USE_TEXTURE是自动打开的
  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform info{
    vec2 s_windowSize;
    vec2 s_offset;
    float s_time;
    float p;  // padding 值 无意义
    vec2 pp;  // padding 值 无意义
    vec4 s_vertex[100]; // UBO内数组元素最小size是一个vec4，用一个vec4存4个float
  };

    vec2 normalizeUV(){
        vec2 uv = f_pos - s_offset;
        uv.x *= s_windowSize.x/s_windowSize.y;
        return uv;
    }

    // 将节点坐标转换为 UV坐标
    vec2 pos2UV(vec2 pos){
        float unit = s_windowSize.y / 2.0;
        return vec2(pos.x / unit, pos.y / unit);
    }


  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    // 纹理使用有问题 ❓
    #if USE_TEXTURE
    CCTexture(texture, v_uv0, o);
            //   CCTexture(array, v_uv0, o);
    vec2 uv = normalizeUV();
    float d = sqrt((uv.x - s_vertex[0].x) * (uv.x - s_vertex[0].x)  + (uv.y - s_vertex[0].x ) * (uv.y - s_vertex[0].x));
    if(d < .05){
        o = vec4(0, 0, 1, 1);
    }
    float d2 = sqrt((uv.x - s_vertex[1].x) * (uv.x - s_vertex[1].x)  + (uv.y - s_vertex[1].x) * (uv.y - s_vertex[1].x));
    if(d2 < .05){
        o = vec4(1, 0, 1, 1);
    }

    #endif
    // 将色彩混合输出
    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
