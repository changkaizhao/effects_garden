{
  "ver": "1.0.25",
  "uuid": "fe7dc462-8ce9-4fa3-bc3c-52a705766267",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec2 f_pos;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  f_pos = pos.xy;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec2 f_pos;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n  uniform vec2 s_windowSize;\nuniform vec2 s_offset;\nuniform float s_time;\n#if USE_LOADING_STYLE\nuniform float u_dot_offset;\nuniform float u_speed;\nuniform float u_power;\nfloat smin( float a, float b, float k ){\n      float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n      return mix( b, a, h ) - k*h*(1.0-h);\n}\n#endif\nvec2 normalizeUV(){\n  vec2 uv = f_pos - s_offset;\n  uv.x *= s_windowSize.x/s_windowSize.y;\n  return uv;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_LOADING_STYLE\n  vec3 COLTOP = vec3(.3,0.6,1.);\n  vec3 COLBTM = vec3(1.,.4,.3);\n  vec3 COLBG = vec3(0.,0.,0.);\n  float SCALE = 0.2;\n  vec2 uv = normalizeUV();\n  float d = 999999.;\n  vec3 col;\n  const int dots = 15;\n  for (int i=0;i<dots;i++) {\n    float t = pow(fract(s_time*u_speed+(float(i)*u_dot_offset)),u_power);\n    float s = 3.14159265359*2.;\n    vec2 oo = vec2(sin(t*s), cos(t*s))*SCALE;\n      float dist = length(uv+oo)-.01;\n      if (dist<d){\n        col=mix(COLTOP,COLBTM, cos(t*s)*.5+.5);\n      }\n    d = smin(d, dist, 0.05);\n  }\n  col = mix(col, COLBG, smoothstep(0., 0.005, d));\n  o = vec4(col,1.0);\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec2 f_pos;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  f_pos = pos.xy;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec2 f_pos;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n  uniform info{\n      vec2 s_windowSize;\n      vec2 s_offset;\n      float s_time;\n  };\n#if USE_LOADING_STYLE\nuniform style{\n  float u_dot_offset;\n  float u_speed;\n  float u_power;\n};\nfloat smin( float a, float b, float k ){\n      float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n      return mix( b, a, h ) - k*h*(1.0-h);\n}\n#endif\nvec2 normalizeUV(){\n  vec2 uv = f_pos - s_offset;\n  uv.x *= s_windowSize.x/s_windowSize.y;\n  return uv;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_LOADING_STYLE\n  vec3 COLTOP = vec3(.3,0.6,1.);\n  vec3 COLBTM = vec3(1.,.4,.3);\n  vec3 COLBG = vec3(0.,0.,0.);\n  float SCALE = 0.2;\n  vec2 uv = normalizeUV();\n  float d = 999999.;\n  vec3 col;\n  const int dots = 15;\n  for (int i=0;i<dots;i++) {\n    float t = pow(fract(s_time*u_speed+(float(i)*u_dot_offset)),u_power);\n    float s = 3.14159265359*2.;\n    vec2 oo = vec2(sin(t*s), cos(t*s))*SCALE;\n      float dist = length(uv+oo)-.01;\n      if (dist<d){\n        col=mix(COLTOP,COLBTM, cos(t*s)*.5+.5);\n      }\n    d = smin(d, dist, 0.05);\n  }\n  col = mix(col, COLBG, smoothstep(0., 0.005, d));\n  o = vec4(col,1.0);\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}